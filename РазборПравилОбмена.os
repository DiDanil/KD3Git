#Область ПроцедурыИФункции
Процедура ОбходЛистьевДрева(СтрокаДерева, СоответствиеОбластей, ПутьКаталога)

	Путь = СтрШаблон("%1%2", ПутьКаталога, СтрокаДерева.ПолныйПуть);
	СоответствиеОбластей.Вставить(СтрокаДерева.ПолныйПуть, Путь);
	Для каждого ЛистДерева из СтрокаДерева.Строки Цикл
	 	ОбходЛистьевДрева(ЛистДерева, СоответствиеОбластей, ПутьКаталога)
	 КонецЦикла;

КонецПроцедуры
#КонецОбласти


//ПолныйПутьКФайлу = "D:\1с\Очоба\OS\test\TR.txt";
//ИмяРепозитория = "UT11TTT";

//ПолныйПутьКФайлу = "\\it-tsr5\Общая\git\rep\UT11TTT\МенеджерОбмена.txt";
//ИмяРепозитория = "UT11TTT";

ПолныйПутьКФайлу = АргументыКоманднойСтроки[0];
КаталогРезультатаРазбора = АргументыКоманднойСтроки[1];

ФайлПравил = Новый Файл(ПолныйПутьКФайлу);
ФайлСуществует = ФайлПравил.Существует();


ТД = Новый ТекстовыйДокумент();
ТД.Прочитать(ПолныйПутьКФайлу, "UTF-8");
Содержимое = ТД.ПолучитьТекст();

#Область РазборОбластейФайла

ТекстРегулярногоПоискОбласти = "^#Область (.*)|^#КонецОбласти";
РегулярноеВыражениеПоискОбласти = Новый РегулярноеВыражение(ТекстРегулярногоПоискОбласти);
РегулярноеВыражениеПоискОбласти.ИгнорироватьРегистр = Истина;
РегулярноеВыражениеПоискОбласти.Многострочный = Истина;

СовпаденияОбласти = РегулярноеВыражениеПоискОбласти.НайтиСовпадения(Содержимое);
МассивОбластей = Новый Массив;


Для каждого СовпадениеОбласти из СовпаденияОбласти Цикл

 	ЭтоКонецОбласти = НЕ СтрНайти(СовпадениеОбласти.Значение, "#КонецОбласти") = 0;

	Если НЕ ЭтоКонецОбласти Тогда

		СтруктураОбласти = Новый Структура;
		СтруктураОбласти.Вставить("ИмяОбласти", СовпадениеОбласти.Группы[1].Значение);
		СтруктураОбласти.Вставить("НачалоОбласти", СовпадениеОбласти.Индекс);
		СтруктураОбласти.Вставить("КонецОбласти", Неопределено);
		МассивОбластей.Добавить(СтруктураОбласти);
		Продолжить;
	КонецЕсли;

	Сч = МассивОбластей.ВГраница();
	Пока Сч >= 0 Цикл
		СтруктураОбласти = МассивОбластей[Сч];
		Если СтруктураОбласти.КонецОбласти = Неопределено Тогда
			СтруктураОбласти.КонецОбласти = СовпадениеОбласти.Индекс;
			Прервать;
		Иначе
			Сч = Сч -1;
		КонецЕсли;
	КонецЦикла;




КонецЦикла;

ДеревоОбластей = Новый ДеревоЗначений();
ДеревоОбластей.Колонки.Добавить("Наименование");
ДеревоОбластей.Колонки.Добавить("ПолныйПуть");
ДеревоОбластей.Колонки.Добавить("КонецОбласти");

ПерваяСтрока = Истина;
РодительскаяОбластьЗакрыта = Истина;


Для каждого Область из МассивОбластей Цикл

	Если ПерваяСтрока = Истина Тогда

		ПолныйПуть = СтрШаблон("\%1", Область.ИмяОбласти);
		Область.Вставить("ПолныйПуть", ПолныйПуть);

		ТекущийУровень = ДеревоОбластей.Строки.Добавить();
		ТекущийУровень.Наименование = Область.ИмяОбласти;
		ТекущийУровень.ПолныйПуть = ПолныйПуть;
		ТекущийУровень.КонецОбласти = Область.КонецОбласти;

		РодительскаяОбластьКонец = Область.КонецОбласти;
		ПерваяСтрока = Ложь;
		Продолжить;
	КонецЕсли;

	Если Область.НачалоОбласти < РодительскаяОбластьКонец Тогда

		ПолныйПуть = СтрШаблон("%1\%2", ТекущийУровень.ПолныйПуть, Область.ИмяОбласти);
		Область.Вставить("ПолныйПуть", ПолныйПуть);

		ТекущийУровень = ТекущийУровень.Строки.Добавить();
		ТекущийУровень.Наименование = Область.ИмяОбласти;
		ТекущийУровень.КонецОбласти = Область.КонецОбласти;
		ТекущийУровень.ПолныйПуть = ПолныйПуть;

		РодительскаяОбластьКонец = Область.КонецОбласти;

	Иначе

		ПоискРодительскойОбласти = Истина;
		Пока ПоискРодительскойОбласти Цикл

			РодительТекущего = ТекущийУровень.Родитель;
			Если РодительТекущего = Неопределено Тогда //Корень 

				ПолныйПуть = СтрШаблон("\%1", Область.ИмяОбласти);
				Область.Вставить("ПолныйПуть", ПолныйПуть);

				ТекущийУровень = ДеревоОбластей.Строки.Добавить();
				ТекущийУровень.Наименование = Область.ИмяОбласти;
				ТекущийУровень.КонецОбласти = Область.КонецОбласти;
				ТекущийУровень.ПолныйПуть = ПолныйПуть;

				РодительскаяОбластьКонец = Область.КонецОбласти;
				
				ПоискРодительскойОбласти = Ложь;
			ИначеЕсли Область.НачалоОбласти > РодительТекущего.КонецОбласти Тогда //Не входит в вышестоящую область
				ТекущийУровень = РодительТекущего;
				Продолжить;
			Иначе//Входит в вышестоящую область
				
				ПолныйПуть = СтрШаблон("%1\%2", РодительТекущего.ПолныйПуть, Область.ИмяОбласти);
				Область.Вставить("ПолныйПуть", ПолныйПуть);

				ТекущийУровень = РодительТекущего.Строки.Добавить();
				ТекущийУровень.Наименование = Область.ИмяОбласти;
				ТекущийУровень.КонецОбласти = Область.КонецОбласти;
				ТекущийУровень.ПолныйПуть = ПолныйПуть;

				РодительскаяОбластьКонец = Область.КонецОбласти;
				
				ПоискРодительскойОбласти = Ложь;

			КонецЕсли;

	
			
		КонецЦикла;
		
	КонецЕсли;


	ПредыдущееЗначение = Область;
КонецЦикла;
#КонецОбласти

#Область РазборПроцедурФайла
//ТекстРегулярногоКонецНачалоФункции = "(\/\/.*\n)*(?:Процедура|Функция)\s*([A-zА-я]\S[^(]*)(?:.|\n[^КонецПроцедуры|КонецФункции])*|КонецПроцедуры|КонецФункции";
//ТекстРегулярногоКонецНачалоФункции = "(\/\/.*\n)*(?:Процедура|Функция)\s*([A-zА-я]\S[^(]*)(.|\n)*?(?=КонецПроцедуры)|Конец(Процедуры|Функции)";
ТекстРегулярногоКонецНачалоФункции = "(\/\/.*\n)*(?:Процедура|Функция)\s*([A-zА-я]\S[^(]*)(?:.|\n)*?(?=Конец(?:Процедуры|Функции))|Конец(?:Процедуры|Функции)";
РегулярноеВыражение = Новый РегулярноеВыражение(ТекстРегулярногоКонецНачалоФункции);
РегулярноеВыражение.ИгнорироватьРегистр = Истина;
РегулярноеВыражение.Многострочный = Истина;

Совпадения = РегулярноеВыражение.НайтиСовпадения(Содержимое);

ТаблицаПроцедур = Новый ТаблицаЗначений();
ТаблицаПроцедур.Колонки.Добавить("ИмяПроцедуры");
ТаблицаПроцедур.Колонки.Добавить("ТекстПроцедуры");
ТаблицаПроцедур.Колонки.Добавить("НачалоПроцедуры");
ТаблицаПроцедур.Колонки.Добавить("ИмяОбласти");
ТаблицаПроцедур.Колонки.Добавить("ПолныйПутьОбласти");
ТаблицаПроцедур.Колонки.Добавить("КонецПроцедуры",Новый ОписаниеТипов("Число"));
ТаблицаПроцедур.Колонки.Добавить("Порядок",Новый ОписаниеТипов("Число"));

ИндексГруппаИмяПроцедуры = 2;
ИндексГруппаТекстПроцедуры = 0;


НачалоМинимальное = 99999999999999999;
КонецМаксимальный = 0;

ПроцедураЗакрыта = Ложь;

РегулярноеВыражениеЭтоКонецПроцедуры = Новый РегулярноеВыражение("КонецПроцедуры|КонецФункции");
РегулярноеВыражениеЭтоКонецПроцедуры.ИгнорироватьРегистр = Истина;
РегулярноеВыражениеЭтоКонецПроцедуры.Многострочный = Истина;

СтрокаНастроек = Неопределено;
Сч = 1;
Для каждого Совпадение из Совпадения Цикл
	
	ЭтоКонецПроцедуры = Ложь;
	ЗначениеСовпадения = Совпадение.Значение;
	
	Если РегулярноеВыражениеЭтоКонецПроцедуры.Совпадает(ЗначениеСовпадения) Тогда
		СовпаденияЭКП = РегулярноеВыражениеЭтоКонецПроцедуры.НайтиСовпадения(Содержимое);
		ЭтоКонецПроцедуры = Истина;
	КонецЕсли;

	Если ЭтоКонецПроцедуры И СтрокаНастроек = Неопределено Тогда
		ВызватьИсключение("Неверная структура файла, закрытий процедур больше открытий")
	КонецЕсли;

	Если ЭтоКонецПроцедуры Тогда
		СтрокаНастроек.КонецПроцедуры = Совпадение.Индекс + Совпадение.Длина;
		//СтрокаНастроек.ТекстПроцедуры = СтрокаНастроек.ТекстПроцедуры + Символы.ПС + ЗначениеСовпадения;
		СтрокаНастроек.ТекстПроцедуры = СтрокаНастроек.ТекстПроцедуры + ЗначениеСовпадения;

		СчОбласти = МассивОбластей.Количество() - 1;
		Пока СчОбласти >= 0 Цикл
			ДанныеОбласти = МассивОбластей[СчОбласти];
			Если ДанныеОбласти.НачалоОбласти < СтрокаНастроек.НачалоПроцедуры 
				И ДанныеОбласти.КонецОбласти > СтрокаНастроек.КонецПроцедуры  Тогда
				СтрокаНастроек.ИмяОбласти = ДанныеОбласти.ИмяОбласти;
				СтрокаНастроек.ПолныйПутьОбласти = ДанныеОбласти.ПолныйПуть;
				
				Прервать;
			КонецЕсли;

			СчОбласти = СчОбласти - 1;
		КонецЦикла;

		Продолжить;
	КонецЕсли;

	СтрокаНастроек = ТаблицаПроцедур.Добавить();
	
	СтрокаНастроек.ИмяПроцедуры = Совпадение.Группы[ИндексГруппаИмяПроцедуры].Значение;
	СтрокаНастроек.ТекстПроцедуры = Совпадение.Группы[ИндексГруппаТекстПроцедуры].Значение;
	СтрокаНастроек.Порядок = Сч;
	СтрокаНастроек.НачалоПроцедуры = Совпадение.Индекс;
	
	Сч = Сч + 1;
	НачалоМинимальное = Мин(НачалоМинимальное, СтрокаНастроек.НачалоПроцедуры);
	КонецМаксимальный = Макс(КонецМаксимальный, СтрокаНастроек.КонецПроцедуры);

КонецЦикла;

#КонецОбласти

#Область СохранениеРазобранныхПравил
 КаталогСохранения = КаталогРезультатаРазбора;
 СоздатьКаталог(КаталогСохранения);

 СоответствиеОбластей = Новый Соответствие();
 Для каждого ДанныеОбласти из ДеревоОбластей.Строки Цикл

	ОбходЛистьевДрева(ДанныеОбласти, СоответствиеОбластей, КаталогСохранения);

 КонецЦикла;

 Для каждого ДанныеОбласти из СоответствиеОбластей Цикл
	СоздатьКаталог(ДанныеОбласти.Значение);

	ПроцедурыОбласти = ТаблицаПроцедур.НайтиСтроки(Новый Структура("ПолныйПутьОбласти", ДанныеОбласти.Ключ));

	Для каждого ДанныеПроцедура из ПроцедурыОбласти Цикл
		ИмяФайла = СтрШаблон("%1\%2.txt", ДанныеОбласти.Значение, ДанныеПроцедура.ИмяПроцедуры);

		ТД = Новый ТекстовыйДокумент();
		ТД.УстановитьТекст(ДанныеПроцедура.ТекстПроцедуры);
		ТД.Записать(ИмяФайла, "UTF-8");
	КонецЦикла;
 КонецЦикла;
 #КонецОбласти

Б = 2;